name: CD # Continuous Deployment

permissions:
  # TODO: once `releases: write` is supported, use it instead.
  contents: write

on:
  release:
    types: [published]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  upload-assets:
    name: ${{ matrix.target }}
    if: github.repository_owner == 'release-plz' && startsWith(github.event.release.name, 'release-plz-v')
    runs-on: ${{ matrix.os }}
    strategy:
      # Run all jobs to completion regardless of errors.
      # This is useful because sometimes we fail to compile for a certain target.
      fail-fast: false
      matrix:
        include:
          - target: aarch64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-13
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')
      - uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')
      - run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')
      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: release-plz
          target: ${{ matrix.target }}
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
      # We use typefully to cross-post the release announcement
      # to release-plz social media accounts.
      # This job prepares the announcement draft. Marco needs to login to
      # typefully to do manual edits (if required) and send the announcement.
      - name: Draft announcement
        run: >-
          curl -X POST "https://api.typefully.com/v1/drafts/"
          -H "Content-Type: application/json"
          -H "X-API-KEY: ${{ secrets.TYPEFULLY_API_KEY }}"
          -d '{
            "content": "ðŸ¤– New release: ${{ github.event.release.name }}\n\n${{ github.event.release.body }}",
            "threadify": true
          }'
