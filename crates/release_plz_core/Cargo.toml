[package]
name = "release_plz_core"
version = "0.30.13"
edition.workspace = true
description = "Update version and changelog based on semantic versioning and conventional commits"
repository = "https://github.com/release-plz/release-plz/tree/main/crates/release_plz_core"
license.workspace = true
keywords = ["release", "please", "semver", "conventional", "commits"]
categories = ["development-tools"]

[lints]
workspace = true

[features]
default = ["all-static"]
all-static = ["cargo/vendored-libgit2", "cargo/all-static"]

[dependencies]
base64.workspace = true
cargo_utils = { path = "../cargo_utils", version = "0.1.61" }
git_cmd = { path = "../git_cmd", version = "0.6.17" }
next_version = { path = "../next_version", version = "0.2" }

anyhow.workspace = true
cacache.workspace = true
cargo_metadata.workspace = true
cargo = { workspace = true }
chrono = { workspace = true, features = ["clock"] }
crates-index.workspace = true
dunce.workspace = true
fs-err = { workspace = true, features = ["tokio"] }
git-cliff-core.workspace = true
git-url-parse.workspace = true
ignore.workspace = true
itertools.workspace = true
lazy_static.workspace = true
parse-changelog.workspace = true
rand.workspace = true
rayon.workspace = true
regex.workspace = true
# native-tls-alpn is needed for http2 support. https://doc.rust-lang.org/cargo/reference/registry-index.html#sparse-protocol
reqwest = { workspace = true, features = ["json", "gzip", "native-tls-alpn"] }
reqwest-middleware.workspace = true
reqwest-retry.workspace = true
secrecy.workspace = true
serde = { workspace = true, features = ["derive"] }
tempfile.workspace = true
toml.workspace = true
tracing.workspace = true
url = { workspace = true, features = ["serde"] }
walkdir.workspace = true
toml_edit.workspace = true
serde_json.workspace = true
strip-ansi-escapes.workspace = true
tokio = { workspace = true, features = ["fs"] }
tera.workspace = true
http.workspace = true

[dev-dependencies]
git_cmd = { path = "../git_cmd", features = ["test_fixture"] }
test_logs = { path = "../test_logs" }
fake_package = { path = "../fake_package" }

expect-test.workspace = true
fake.workspace = true
tokio = { workspace = true, features = ["macros"] }
wiremock.workspace = true
